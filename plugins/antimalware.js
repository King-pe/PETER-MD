const { smd, prefix } = require("../lib");

// In-memory config per chat
const amlConfig = {
  // default settings
  default: {
    enabled: true,
    action: "warn", // warn | delete
    whitelist: ["whatsapp.com", "facebook.com", "instagram.com", "youtube.com", "youtu.be", "google.com", "tiktok.com"],
    blacklist: ["grabify", "iplogger", "drive-download-redirect", "free-nitro", "airdrop", "crypto-drops"],
  },
};

function getCfg(jid) {
  if (!amlConfig[jid]) amlConfig[jid] = JSON.parse(JSON.stringify(amlConfig.default));
  return amlConfig[jid];
}

function extractUrls(text = "") {
  const urlRegex = /\b((https?:\/\/)?([\w-]+\.)+[\w-]{2,}(\/[\w\-._~:/?#[\]@!$&'()*+,;=%]*)?)\b/gi;
  const results = [];
  let m;
  while ((m = urlRegex.exec(text))) {
    results.push(m[1]);
  }
  return Array.from(new Set(results));
}

function domainFromUrl(url) {
  try {
    const u = url.startsWith("http") ? new URL(url) : new URL("https://" + url);
    return u.hostname.toLowerCase();
  } catch {
    return "";
  }
}

function looksSuspicious(url, cfg) {
  const d = domainFromUrl(url);
  if (!d) return false;
  // Whitelist safe domains
  if (cfg.whitelist.some(w => d === w || d.endsWith("." + w))) return false;

  const urlL = url.toLowerCase();
  // Blacklist keywords
  if (cfg.blacklist.some(b => urlL.includes(b))) return true;

  // Heuristics
  const isIp = /^(\d{1,3}\.){3}\d{1,3}$/.test(d) || d.includes(":");
  const hasAt = url.includes("@");
  const isHttpOnly = url.startsWith("http://");
  const hasPuny = /xn--/i.test(d);
  const shortener = /bit\.ly|tinyurl\.com|t\.co|is\.gd|cutt\.ly|goo\.gl|rebrand\.ly|shorte\.st|ow\.ly|s\.id/i.test(d);
  const badExt = /(\.exe|\.scr|\.bat|\.js|\.vbs|\.apk)(\b|$)/i.test(urlL);
  let score = 0;
  if (isIp) score += 2;
  if (hasAt) score += 1;
  if (isHttpOnly) score += 1;
  if (hasPuny) score += 1;
  if (shortener) score += 1;
  if (badExt) score += 3;
  return score >= 2;
}

// Listener: scan group messages for suspicious links
smd({ on: "text" }, async (m, text) => {
  try {
    if (!m.isGroup || !text) return;
    const cfg = getCfg(m.chat);
    if (!cfg.enabled) return;
    const urls = extractUrls(text);
    if (!urls.length) return;
    const sus = urls.filter(u => looksSuspicious(u, cfg));
    if (!sus.length) return;

    const alertText = (
      "⚠️ AI Alert: Kiungo kinahisiwa kuwa hatari kimegundulika.\n" +
      `Mtumaji: @${m.sender.split("@")[0]}\n` +
      `Hatari: ${sus.join(", ")}\n` +
      `Hatua: ${cfg.action === "delete" ? "Kufuta ujumbe" : "Onyo kwa mtumaji"}\n` +
      `Dhibiti: ${prefix}aml on|off, ${prefix}aml action warn|delete, ${prefix}aml wl add|rm domain.com, ${prefix}aml bl add|rm keyword`
    );

    // Try delete if configured
    if (cfg.action === "delete") {
      try {
        await m.bot.sendMessage(m.chat, { delete: m.key });
      } catch {}
    }
    await m.send(alertText, { mentions: [m.sender] });
  } catch (e) {
    // silent
  }
});

// Admin command to configure
smd({
  pattern: "aml",
  desc: "Dhibiti AI link alerts (admin)",
  category: "security",
  filename: __filename,
  use: "aml on|off | aml action warn|delete | aml wl add|rm domain | aml bl add|rm word",
}, async (m, input, { isAdmin, isCreator }) => {
  try {
    if (!m.isGroup) return m.reply("Hii amri ni ya makundi tu.");
    if (!isAdmin && !isCreator) return m.reply("Unahitaji admin.");
    const args = (input || "").trim().split(/\s+/);
    const sub = (args.shift() || "").toLowerCase();
    const cfg = getCfg(m.chat);
    if (sub === "on") {
      cfg.enabled = true;
      return m.reply("AI link alerts: ON");
    }
    if (sub === "off") {
      cfg.enabled = false;
      return m.reply("AI link alerts: OFF");
    }
    if (sub === "action") {
      const val = (args[0] || "warn").toLowerCase();
      cfg.action = ["warn", "delete"].includes(val) ? val : "warn";
      return m.reply("Hatua itakayochukuliwa: " + cfg.action);
    }
    if (sub === "wl" || sub === "bl") {
      const list = sub === "wl" ? cfg.whitelist : cfg.blacklist;
      const op = (args.shift() || "").toLowerCase();
      const item = (args.shift() || "").toLowerCase();
      if (!op || !item) return m.reply("Mfano: aml wl add domain.com");
      if (op === "add") { if (!list.includes(item)) list.push(item); }
      else if (op === "rm") { const i = list.indexOf(item); if (i > -1) list.splice(i, 1); }
      return m.reply(`${sub === "wl" ? "Whitelist" : "Blacklist"}: ${list.join(", ") || "(empty)"}`);
    }
    // status
    return m.reply(
      `Status:\n- enabled: ${cfg.enabled}\n- action: ${cfg.action}\n- whitelist: ${cfg.whitelist.join(", ")}\n- blacklist: ${cfg.blacklist.join(", ")}`
    );
  } catch (e) {
    await m.error(e + "\n\ncommand: aml", e);
  }
});


